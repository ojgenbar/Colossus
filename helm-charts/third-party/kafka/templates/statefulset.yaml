apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kafka.fullname" . }}
  labels:
    {{- include "kafka.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "kafka.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kafka.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "kafka.selectorLabels" . | nindent 8 }}
    spec:
      enableServiceLinks: false
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: kafka
              containerPort: 29092
              protocol: TCP
            - name: controller
              containerPort: 9093
              protocol: TCP
          env:
            - name: KAFKA_PROCESS_ROLES
              value: "{{ .Values.kraft.processRoles }}"
            - name: KAFKA_NODE_ID
              value: "{{ .Values.kraft.nodeId }}"
            - name: CLUSTER_ID
              value: "{{ .Values.kraft.clusterId }}"
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "{{ .Values.kraft.nodeId }}@{{ include "kafka.fullname" . }}-0.{{ include "kafka.fullname" . }}-headless.{{ .Release.Namespace }}.svc.cluster.local:9093"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "{{ .Values.kafka.controllerListenerNames }}"
            - name: KAFKA_LISTENERS
              value: "{{ .Values.kafka.listeners }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://{{ include "kafka.fullname" . }}-0.{{ include "kafka.fullname" . }}-headless.{{ .Release.Namespace }}.svc.cluster.local:29092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "{{ .Values.kafka.listenerSecurityProtocolMap }}"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "{{ .Values.kafka.interBrokerListenerName }}"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "{{ .Values.kafka.offsetsTopicReplicationFactor }}"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "{{ .Values.kafka.transactionStateLogReplicationFactor }}"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "{{ .Values.kafka.transactionStateLogMinIsr }}"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "{{ .Values.kafka.autoCreateTopicsEnable }}"
            - name: KAFKA_LOG_DIRS
              value: "{{ .Values.kafka.logDirs }}"
          volumeMounts:
            - name: kafka-data
              mountPath: {{ .Values.persistence.mountPath }}
          readinessProbe:
            tcpSocket:
              port: 29092
            initialDelaySeconds: 30
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 29092
            initialDelaySeconds: 60
            periodSeconds: 30
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
